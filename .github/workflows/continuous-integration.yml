name: Continuous Integration

on:
  push:
    paths-ignore: ["src_dos/**"]
    tags-ignore: ["*"]
  pull_request:
    branches: ["*"]

jobs:
  Cmake:
    name: ${{ matrix.os.name }} | ${{ matrix.arch.name }}
    runs-on: ${{ matrix.os.runner }}
    strategy:
      fail-fast: false
      matrix:
        os:
          -
            name: "Windows"
            runner: "windows-latest"
            shell: "msys2 {0}"
          -
            name: "Linux"
            runner: "ubuntu-latest"
            shell: "bash"
        arch:
          -
            name: "x86"
            bits: "32"
            msys_name: "i686"
          -
            name: "x64"
            bits: "64"
            msys_name: "x86_64"
        compiler:
          -
            name: "gcc"
            msys_msystem_prefix: "MINGW"
            msys_package_prefix: "mingw-w64"
        exclude:
          -
            os:
              name: "Linux"
            arch:
              name: "x86"
    defaults:
      run:
        shell: ${{ matrix.os.shell }}
    steps:
      - name: Setup MSYS env
        if: ${{ matrix.os.name == 'Windows' }}
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.compiler.msys_msystem_prefix }}${{ matrix.arch.bits }}
          update: true
          install: >-
            ${{ matrix.compiler.msys_package_prefix }}-${{ matrix.arch.msys_name }}-pkgconf
            ${{ matrix.compiler.msys_package_prefix }}-${{ matrix.arch.msys_name }}-${{ matrix.compiler.name }}
            ${{ matrix.compiler.msys_package_prefix }}-${{ matrix.arch.msys_name }}-gdb
            ${{ matrix.compiler.msys_package_prefix }}-${{ matrix.arch.msys_name }}-ninja
            ${{ matrix.compiler.msys_package_prefix }}-${{ matrix.arch.msys_name }}-cmake
            ${{ matrix.compiler.msys_package_prefix }}-${{ matrix.arch.msys_name }}-SDL2
            ${{ matrix.compiler.msys_package_prefix }}-${{ matrix.arch.msys_name }}-SDL2_net
            ${{ matrix.compiler.msys_package_prefix }}-${{ matrix.arch.msys_name }}-SDL2_mixer
            ${{ matrix.compiler.msys_package_prefix }}-${{ matrix.arch.msys_name }}-libsamplerate
            ${{ matrix.compiler.msys_package_prefix }}-${{ matrix.arch.msys_name }}-libpng

      - name: Setup Linux env
        if: ${{ matrix.os.name == 'Linux' }}
        run: |
          sudo apt-get update --fix-missing
          sudo apt-get full-upgrade --fix-missing
          sudo apt-get install --fix-missing ${{ matrix.compiler.name }} ninja-build cmake libsdl2-dev libsdl2-net-dev libsdl2-mixer-dev libpng-dev libsamplerate-dev

      - uses: actions/checkout@v2

      - name: Configure
        id: configure
        run: |
          cmake -G "Ninja" -D BUILD_VERSION_OVERWRITE="5.x.x" -D FORCE_GIT_HASH_SUFFIX=ON -D CMAKE_BUILD_TYPE=RelWithDebInfo -S . -B build
          sha_short=$(echo ${{ github.sha }} | cut -c1-7)
          echo "::set-output name=sha_short::$sha_short"

      - name: Build
        run: |
          export MAKEFLAGS=--keep-going
          cmake --build build --parallel 2

      - name: Test
        if: ${{ matrix.os.name == 'Windows' }} # Linux runners have no video device
        run: |
          cd build
          ctest --output-on-failure

      - name: Install
        if: ${{ github.repository == 'JNechaevsky/inter-doom' && github.event_name == 'push' && github.ref == 'refs/heads/master' && matrix.os.name == 'Windows' }}
        run: |
          cmake --install build --prefix "./build/install"

      - name: Package Zip
        if: ${{ github.repository == 'JNechaevsky/inter-doom' && github.event_name == 'push' && github.ref == 'refs/heads/master' && matrix.os.name == 'Windows' }}
        uses: actions/upload-artifact@v2
        with:
          name: inter-doom-5.x.x-${{ steps.configure.outputs.sha_short }}-windows-${{ matrix.arch.name }}
          path: ./build/install/
