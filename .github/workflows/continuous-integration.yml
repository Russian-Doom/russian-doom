name: Continuous Integration

on:
  push:
    branches: ["*"]
    paths-ignore: ["src_dos/**"]
    tags-ignore: ["*"]
  pull_request:
    branches: ["*"]

jobs:
  Cmake:
    name: ${{ matrix.os.name }} | ${{ matrix.arch.name }} | ${{ matrix.compiler.display_name }}
    runs-on: ${{ matrix.os.runner }}
    strategy:
      fail-fast: false
      matrix:
        os:
          -
            name: "Windows"
            runner: "windows-2019" # windows-2022
          -
            name: "Linux"
            runner: "ubuntu-22.04"
        arch:
          -
            name: "x86"
            bits: "32"
            msys_name: "i686"
            msvc_gen_opts: "-T v141_xp -A Win32"
            msvc_triplet: "x86-windows"
          -
            name: "x64"
            bits: "64"
            msys_name: "x86_64"
            msvc_gen_opts: "-A x64"
            msvc_triplet: "x64-windows"
        compiler:
          -
            display_name: "GCC"
            name: "gcc"
            msys_msystem_prefix: "MINGW"
            msys_package_prefix: "mingw-w64"
            cmake_gen: "Ninja"
          -
            display_name: "Clang"
            name: "clang"
            msys_msystem_prefix: "CLANG"
            msys_package_prefix: "mingw-w64-clang"
            cmake_gen: "Ninja"
          -
            display_name: "MSVC"
            name: "cl"
            cmake_gen: "Visual Studio 16 2019" # Visual Studio 17 2022
        exclude:
          - # Disable x86 build on linux (require crosscompiling)
            os:
              name: "Linux"
            arch:
              name: "x86"
          - # Disable MSVC compiler on Linux (no MSVC for Linux)
            os:
              name: "Linux"
            compiler:
              display_name: "MSVC"
          - # Disable MSVC compiler for x86
            compiler:
              display_name: "MSVC"
            arch:
              name: "x86"
        include:
          -
            shell: "bash"
          -
            os:
              name: "Windows"
            compiler:
              display_name: "GCC"
            shell: "msys2 {0}"
          -
            os:
              name: "Windows"
            compiler:
              display_name: "Clang"
            shell: "msys2 {0}"
    defaults:
      run:
        shell: ${{ matrix.shell }}
    env:
      VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
    steps:
      - name: Setup MSYS env
        if: |
          matrix.os.name == 'Windows' &&
          matrix.compiler.display_name != 'MSVC'
        timeout-minutes: 10
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.compiler.msys_msystem_prefix }}${{ matrix.arch.bits }}
          update: true
          install: >-
            ${{ matrix.compiler.msys_package_prefix }}-${{ matrix.arch.msys_name }}-pkgconf
            ${{ matrix.compiler.msys_package_prefix }}-${{ matrix.arch.msys_name }}-${{ matrix.compiler.name }}
            ${{ matrix.compiler.msys_package_prefix }}-${{ matrix.arch.msys_name }}-gdb
            ${{ matrix.compiler.msys_package_prefix }}-${{ matrix.arch.msys_name }}-ninja
            ${{ matrix.compiler.msys_package_prefix }}-${{ matrix.arch.msys_name }}-cmake
            ${{ matrix.compiler.msys_package_prefix }}-${{ matrix.arch.msys_name }}-SDL2
            ${{ matrix.compiler.msys_package_prefix }}-${{ matrix.arch.msys_name }}-SDL2_net
            ${{ matrix.compiler.msys_package_prefix }}-${{ matrix.arch.msys_name }}-SDL2_mixer
            ${{ matrix.compiler.msys_package_prefix }}-${{ matrix.arch.msys_name }}-libsamplerate
            git

      - name: Install MSVC XP toolset
        if: |
          matrix.os.runner == 'windows-2022' &&
          matrix.arch.name == 'x86' &&
          matrix.compiler.display_name == 'MSVC'
        run: |
          echo "Installing Microsoft.VisualStudio.Component.WinXP"
          "C:\Program Files (x86)\Microsoft Visual Studio\Installer\vs_installer" modify \
              --installPath "C:\Program Files\Microsoft Visual Studio\2022\Enterprise" \
              --add Microsoft.VisualStudio.Component.WinXP \
              --nocache --norestart --quiet
          echo "Installation of Microsoft.VisualStudio.Component.WinXP finished"

      - name: Get GitHub Action Cache url and token
        if: |
          matrix.os.name == 'Windows' &&
          matrix.compiler.display_name == 'MSVC'
        uses: actions/github-script@v6
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Setup MSVC env
        if: |
          matrix.os.name == 'Windows' &&
          matrix.compiler.display_name == 'MSVC'
        run: |
          cd $VCPKG_INSTALLATION_ROOT
          git pull
          ./bootstrap-vcpkg.sh -disableMetrics

#         For classic mode:
#         vcpkg integrate install
#         vcpkg install --triplet=${{ matrix.arch.msvc_triplet }} sdl2 sdl2-mixer[core,libflac,libmodplug,mpg123,opusfile] sdl2-net libsamplerate

      - name: Setup Linux env
        if: matrix.os.name == 'Linux'
        run: |
          sudo apt-get update --fix-missing
          sudo apt-get full-upgrade --fix-missing
          sudo apt-get install ${{ matrix.compiler.name }} gdb ninja-build python3 cmake \
                               libsdl2-dev libsdl2-net-dev libsdl2-mixer-dev libsamplerate-dev

      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure
        id: configure
        env:
          CC: ${{ matrix.compiler.name }}
        run: |
          if [[ '${{ matrix.compiler.display_name }}' == 'MSVC' ]]
          then
              msvc_gen_opts='${{ matrix.arch.msvc_gen_opts }}'
              msvc_cmake_toolchain="-D CMAKE_TOOLCHAIN_FILE=$VCPKG_INSTALLATION_ROOT/scripts/buildsystems/vcpkg.cmake"
          fi
          if [[ '${{ matrix.os.name }}' == 'Linux' ]]
          then
              build_portable='-D BUILD_PORTABLE=ON'
          fi
          rev_number=$(git rev-list --count HEAD)
          cmake -G "${{ matrix.compiler.cmake_gen }}" \
                $msvc_gen_opts \
                $msvc_cmake_toolchain \
                -D BUILD_VERSION_OVERWRITE="r$rev_number" \
                -D FORCE_GIT_HASH_SUFFIX=ON \
                -D CMAKE_BUILD_TYPE=RelWithDebInfo \
                $build_portable \
                -D TEST_WITH_GDB="ON"\
                -S . -B build
          sha_short=$(echo ${{ github.sha }} | cut -c1-7)
          echo "sha_short=$sha_short" >> $GITHUB_OUTPUT
          echo "rev_number=r$rev_number" >> $GITHUB_OUTPUT

      - name: Build
        run: |
          export MAKEFLAGS=--keep-going
          cmake --build build --config RelWithDebInfo --parallel 2

      - name: Test Windows
        if: ${{ matrix.os.name == 'Windows' }}
        run: |
          cd build
          ctest --output-on-failure -C RelWithDebInfo

      - name: Test Linux
        if: ${{ matrix.os.name == 'Linux' }}
        env:
          SDL_VIDEODRIVER: dummy
        run: |
          cd build
          ctest --output-on-failure

      - name: Install
        if: |
          github.repository == 'JNechaevsky/inter-doom' &&
          github.event_name == 'push' &&
          github.ref == 'refs/heads/master' &&
          matrix.os.name == 'Windows'
        run: |
          cmake --install build --config RelWithDebInfo --prefix "./build/install"

      - name: Package Zip
        if: |
          github.repository == 'JNechaevsky/inter-doom' &&
          github.event_name == 'push' &&
          github.ref == 'refs/heads/master' &&
          matrix.os.name == 'Windows'
        uses: actions/upload-artifact@v3
        with:
          name: inter-doom-${{ steps.configure.outputs.rev_number }}-${{ steps.configure.outputs.sha_short }}-windows-${{ matrix.arch.name }}-${{ matrix.compiler.display_name }}
          path: ./build/install/
